1738634600
84e399b8f2181ccd73394fdeddff1638-phpdoc%3A8f924df7646eb4fba339c1c12579fdcf-a850ae63c48afa88d11a6bb427c54f3b
s:42240:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjI0OiJlZGl0X3N0dWRlbnRfZGV0YWlscy5waHAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiYTg1MGFlNjNjNDhhZmE4OGQxMWE2YmI0MjdjNTRmM2IiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNjoicGFnZXMvYWRtaW4vZWRpdF9zdHVkZW50X2RldGFpbHMucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czozMDc1MToiPD9waHANCmluY2x1ZGVfb25jZSgnLi4vLi4vY29ubi5waHAnKTsNCmluY2x1ZGVfb25jZSgnLi4vLi4vZnVuY3Rpb25zLnBocCcpOw0KaW5jbHVkZV9vbmNlKCdoZWFkZXIucGhwJyk7DQoNCmlmIChpc3NldCgkX1BPU1RbJ2NoYW5nZV9zdGF0dXMnXSkpIHsNCiAgZXh0cmFjdChhcnJheV9tYXAoJ2FkZHNsYXNoZXMnLCAkX1BPU1QpKTsNCiAgcXVlcnkoIlVQREFURSBzdHVkZW5fZmlsZV90Ymwgc2V0IGV2YWx1YXRpb25fc3RhdHVzX2lkID0gJyRldmFsdWF0aW9uX3N0YXR1c19pZCcgIHdoZXJlIHN0dWRlbl9maWxlX2lkID0gIiAuICRjaGFuZ2Vfc3RhdHVzKTsNCiAgZWNobyBtZXNzYWdlX3N1Y2Nlc3MoIkNoYW5nZWQgU3RhdHVzISIpOw0KfQ0KaWYgKGlzc2V0KCRfUE9TVFsndXBkYXRlX2ZlZWRiYWNrJ10pKSB7DQogIGV4dHJhY3QoYXJyYXlfbWFwKCdhZGRzbGFzaGVzJywgJF9QT1NUKSk7DQogIHF1ZXJ5KCJVUERBVEUgc3R1ZGVuX2ZpbGVfdGJsIHNldCBmZWVkYmFjayA9ICckZmVlZGJhY2snICB3aGVyZSBzdHVkZW5fZmlsZV9pZCA9ICIgLiAkaWQpOw0KICBlY2hvIG1lc3NhZ2Vfc3VjY2VzcygiVXBkYXRlZCBGZWVkYmFjayEiKTsNCn0NCg0KaWYgKGlzc2V0KCRfUE9TVFsnZGVsZXRlX3JlY29tbWVuZGVkX3N1YmplY3QnXSkpIHsNCiAgcXVlcnkoIkRFTEVURSBGUk9NIHJlY29tbWVuZGVkX3N1YmplY3RzX3RibCB3aGVyZSByZWNvbW1lbmRlZF9zdWJqZWN0X2lkID0gIiAuICRfUE9TVFsnZGVsZXRlJ10pOw0KICBlY2hvIG1lc3NhZ2Vfc3VjY2VzcygiRGVsZXRlZCBTdWNjZXNzZnVsbHkhIik7DQp9DQoNCmlmIChpc3NldCgkX1BPU1RbJ2RlbGV0ZV9yZWNvbW1lbmRhdGlvbiddKSkgew0KICBxdWVyeSgiREVMRVRFIEZST00gcmVjb21tZW5kZWRfc3ViamVjdHNfdGJsIHdoZXJlIHJlY29tbWVuZGVkX3N1YmplY3RfaWQgPSAiIC4gJF9QT1NUWydkZWxldGVfcmVjb21tZW5kYXRpb24nXSk7DQogIGVjaG8gbWVzc2FnZV9zdWNjZXNzKCJEZWxldGVkIFN1Y2Nlc3NmdWxseSEiKTsNCn0NCmlmIChpc3NldCgkX1BPU1RbJ2RlbGV0ZSddKSkgew0KICBxdWVyeSgiREVMRVRFIEZST00gc3R1ZGVudF9zdWJqZWN0c190Ymwgd2hlcmUgc3R1ZGVudF9zdWJqZWN0X2lkID0gIiAuICRfUE9TVFsnZGVsZXRlJ10pOw0KICBlY2hvIG1lc3NhZ2Vfc3VjY2VzcygiRGVsZXRlZCBTdWNjZXNzZnVsbHkhIik7DQp9DQppZiAoaXNzZXQoJF9QT1NUWydncmFkZSddKSkgew0KICBleHRyYWN0KGFycmF5X21hcCgnYWRkc2xhc2hlcycsICRfUE9TVCkpOw0KICBxdWVyeSgiVVBEQVRFIHN0dWRlbnRfc3ViamVjdHNfdGJsIHNldCBncmFkZV9pZCA9ICckZ3JhZGVfaWQnICB3aGVyZSBzdHVkZW50X3N1YmplY3RfaWQgPSAiIC4gJF9QT1NUWydncmFkZSddKTsNCiAgZWNobyBtZXNzYWdlX3N1Y2Nlc3MoIlVwZGF0ZWQgU3VjY2Vzc2Z1bGx5ISIpOw0KfQ0KDQppZiAoaXNzZXQoJF9QT1NUWydjcmVhdGVfcmVjb21tZW5kYXRpb24nXSkpIHsNCiAgZXh0cmFjdChhcnJheV9tYXAoJ2FkZHNsYXNoZXMnLCAkX1BPU1QpKTsNCiAgJGNoZWNrX2V4aXN0cyA9IGdldF9vbmUoIlNFTEVDVCBpZihtYXgocmVjb21tZW5kZWRfc3ViamVjdF9pZCkgaXMgbnVsbCwgMCwgbWF4KHJlY29tbWVuZGVkX3N1YmplY3RfaWQpICsgMSkgYXMgYHJlc2AgZnJvbSByZWNvbW1lbmRlZF9zdWJqZWN0c190YmwgIHdoZXJlICAgc3R1ZGVudF9pZCA9ICckc3R1ZGVudF9pZCcgYW5kICBzdWJqZWN0X2lkID0gJyRzdWJqZWN0X2lkJyBhbmQgIHllYXJfaWQgPSAnJHllYXJfaWQnICBhbmQgIHNlbWVzdGVyX2lkID0gJyRzZW1lc3Rlcl9pZCcgIGxpbWl0IDEiKTsNCg0KICBpZiAoIWVtcHR5KCRjaGVja19leGlzdHMtPnJlcykpIHsNCiAgICBlY2hvIG1lc3NhZ2VfZXJyb3IoIlJlY29yZCBBbHJlYWR5IEV4aXN0cyEiKTsNCiAgfSBlbHNlIHsNCiAgICBxdWVyeSgiSU5TRVJUIElOVE8gcmVjb21tZW5kZWRfc3ViamVjdHNfdGJsIChzdHVkZW50X2lkLHN1YmplY3RfaWQseWVhcl9pZCxzZW1lc3Rlcl9pZCwgcHJlX3N1YmplY3RfaWQpIFZBTFVFUyAgKCckc3R1ZGVudF9pZCcsJyRzdWJqZWN0X2lkJywnJHllYXJfaWQnLCckc2VtZXN0ZXJfaWQnLCAnJHByZV9zdWJqZWN0X2lkJykgIik7DQogICAgZWNobyAiDQogIDxzY3JpcHQ+ICANCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgDQogICAgZnVuY3Rpb24oKXsNCiAgICAgICQoJyNtb2RhbC1jcmVhdGUtcmVjb21tZW5kYXRpb24nKS5tb2RhbCgnc2hvdycpOw0KICAgIH0pOw0KICA8L3NjcmlwdD4iOw0KICAgIGVjaG8gbWVzc2FnZV9zdWNjZXNzKCJDcmVhdGVkIFN1Y2Nlc3NmdWxseSEiKTsNCiAgfQ0KfQ0KaWYgKGlzc2V0KCRfUE9TVFsnY3JlYXRlJ10pKSB7DQogIGV4dHJhY3QoYXJyYXlfbWFwKCdhZGRzbGFzaGVzJywgJF9QT1NUKSk7DQogICRjaGVja19leGlzdHMgPSBnZXRfb25lKCJTRUxFQ1QgaWYobWF4KHN0dWRlbnRfc3ViamVjdF9pZCkgaXMgbnVsbCwgMCwgbWF4KHN0dWRlbnRfc3ViamVjdF9pZCkgKyAxKSBhcyBgcmVzYCBmcm9tIHN0dWRlbnRfc3ViamVjdHNfdGJsICB3aGVyZSAgIHN0dWRlbnRfaWQgPSAnJHN0dWRlbnRfaWQnIGFuZCAgc3ViamVjdF9pZCA9ICckc3ViamVjdF9pZCcgYW5kICB5ZWFyX2lkID0gJyR5ZWFyX2lkJyAgYW5kICBzZW1lc3Rlcl9pZCA9ICckc2VtZXN0ZXJfaWQnICBsaW1pdCAxIik7DQoNCiAgaWYgKCFlbXB0eSgkY2hlY2tfZXhpc3RzLT5yZXMpKSB7DQogICAgZWNobyBtZXNzYWdlX2Vycm9yKCJSZWNvcmQgQWxyZWFkeSBFeGlzdHMhIik7DQogIH0gZWxzZSB7DQogICAgcXVlcnkoIklOU0VSVCBJTlRPIHN0dWRlbnRfc3ViamVjdHNfdGJsIChzdHVkZW50X2lkLHN1YmplY3RfaWQseWVhcl9pZCxzZW1lc3Rlcl9pZCwgcHJlX3N1YmplY3RfaWQpIFZBTFVFUyAgKCckc3R1ZGVudF9pZCcsJyRzdWJqZWN0X2lkJywnJHllYXJfaWQnLCckc2VtZXN0ZXJfaWQnLCAnJHByZV9zdWJqZWN0X2lkJykgIik7DQogICAgZWNobyAiDQogIDxzY3JpcHQ+ICANCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgDQogICAgZnVuY3Rpb24oKXsNCiAgICAgICQoJyNtb2RhbC1jcmVhdGUnKS5tb2RhbCgnc2hvdycpOw0KICAgIH0pOw0KICA8L3NjcmlwdD4iOw0KICAgIGVjaG8gbWVzc2FnZV9zdWNjZXNzKCJDcmVhdGVkIFN1Y2Nlc3NmdWxseSEiKTsNCiAgfQ0KfQ0KDQppZiAoaXNzZXQoJF9QT1NUWydlZGl0J10pKSB7DQogIGV4dHJhY3QoYXJyYXlfbWFwKCdhZGRzbGFzaGVzJywgJF9QT1NUKSk7DQogICRjaGVja19leGlzdHMgPSBnZXRfb25lKCJTRUxFQ1QgaWYobWF4KHN0dWRlbnRfc3ViamVjdF9pZCkgaXMgbnVsbCwgMCwgbWF4KHN0dWRlbnRfc3ViamVjdF9pZCkgKyAxKSBhcyBgcmVzYCBmcm9tIHN0dWRlbnRfc3ViamVjdHNfdGJsICB3aGVyZSAoc3R1ZGVudF9pZCA9ICckc3R1ZGVudF9pZCcgYW5kICBzdWJqZWN0X2lkID0gJyRzdWJqZWN0X2lkJyBhbmQgIHllYXJfaWQgPSAnJHllYXJfaWQnICBhbmQgIHNlbWVzdGVyX2lkID0gJyRzZW1lc3Rlcl9pZCcgKSBhbmQgc3R1ZGVudF9zdWJqZWN0X2lkIDw+ICRpZCBsaW1pdCAxIik7DQoNCiAgaWYgKCFlbXB0eSgkY2hlY2tfZXhpc3RzLT5yZXMpKSB7DQogICAgZWNobyBtZXNzYWdlX2Vycm9yKCJSZWNvcmQgQWxyZWFkeSBJbi11c2UhIik7DQogIH0gZWxzZSB7DQogICAgcXVlcnkoIlVQREFURSBzdHVkZW50X3N1YmplY3RzX3RibCBzZXQgIHN1YmplY3RfaWQgPSckc3ViamVjdF9pZCcseWVhcl9pZCA9JyR5ZWFyX2lkJyxgc2VtZXN0ZXJfaWRgID0nJHNlbWVzdGVyX2lkJywgYHByZV9zdWJqZWN0X2lkYCA9ICckcHJlX3N1YmplY3RfaWQnICB3aGVyZSBzdHVkZW50X3N1YmplY3RfaWQgPSAnJGlkJyAiKTsNCiAgICBlY2hvIG1lc3NhZ2Vfc3VjY2VzcygiVXBkYXRlZCBTdWNjZXNzZnVsbHkhIik7DQogIH0NCn0NCg0KaWYgKGlzc2V0KCRfUE9TVFsnZWRpdF9yZWNvbW1lbmRhdGlvbiddKSkgew0KICBleHRyYWN0KGFycmF5X21hcCgnYWRkc2xhc2hlcycsICRfUE9TVCkpOw0KICAkY2hlY2tfZXhpc3RzID0gZ2V0X29uZSgiU0VMRUNUIGlmKG1heChyZWNvbW1lbmRlZF9zdWJqZWN0X2lkKSBpcyBudWxsLCAwLCBtYXgocmVjb21tZW5kZWRfc3ViamVjdF9pZCkgKyAxKSBhcyBgcmVzYCBmcm9tIHJlY29tbWVuZGVkX3N1YmplY3RzX3RibCAgd2hlcmUgKHN0dWRlbnRfaWQgPSAnJHN0dWRlbnRfaWQnIGFuZCAgc3ViamVjdF9pZCA9ICckc3ViamVjdF9pZCcgYW5kICB5ZWFyX2lkID0gJyR5ZWFyX2lkJyAgYW5kICBzZW1lc3Rlcl9pZCA9ICckc2VtZXN0ZXJfaWQnICkgYW5kIHN0dWRlbnRfaWQgPD4gJHN0dWRlbnRfaWQgbGltaXQgMSIpOw0KDQogIGlmICghZW1wdHkoJGNoZWNrX2V4aXN0cy0+cmVzKSkgew0KICAgIGVjaG8gbWVzc2FnZV9lcnJvcigiUmVjb3JkIEFscmVhZHkgSW4tdXNlISIpOw0KICB9IGVsc2Ugew0KICAgIHF1ZXJ5KCJVUERBVEUgcmVjb21tZW5kZWRfc3ViamVjdHNfdGJsIHNldCAgc3ViamVjdF9pZCA9JyRzdWJqZWN0X2lkJyx5ZWFyX2lkID0nJHllYXJfaWQnLGBzZW1lc3Rlcl9pZGAgPSckc2VtZXN0ZXJfaWQnLCBgcHJlX3N1YmplY3RfaWRgID0gJyRwcmVfc3ViamVjdF9pZCcgIHdoZXJlIHJlY29tbWVuZGVkX3N1YmplY3RfaWQgPSAnJGlkJyAiKTsNCiAgICBlY2hvIG1lc3NhZ2Vfc3VjY2VzcygiVXBkYXRlZCBTdWNjZXNzZnVsbHkhIik7DQogIH0NCn0NCiRzdHVkZW50X2RhdGEgPSBnZXRfb25lKCJTRUxFQ1QgKiBmcm9tIHN0dWRlbnRfdGJsIHdoZXJlIHN0dWRlbnRfaWQgPSAiIC4gJF9HRVRbJ2lkJ10pOw0KJGRhdGEgPSBnZXRfb25lKCJTRUxFQ1QgcC4qLHMuKixjLiogZnJvbSBjdXJyaWN1bHVtX3RibCBjIGlubmVyIGpvaW4gcHJvZ3JhbV90YmwgcCBvbiBwLnByb2dyYW1faWQgPSBjLnByb2dyYW1faWQgaW5uZXIgam9pbiBjdXJyaWN1bHVtX3NlbWVzdGVyX3RibCBzIG9uIHMuY3VycmljdWx1bV9zZW1lc3Rlcl9pZCA9IGMuY3VycmljdWx1bV9zZW1lc3Rlcl9pZCB3aGVyZSBjLmN1cnJpY3VsdW1faWQgPSAiIC4gJHN0dWRlbnRfZGF0YS0+Y3VycmljdWx1bV9pZCkNCg0KDQoNCg0KPz4NCjwhLS0gQ29udGVudCBIZWFkZXIgKFBhZ2UgaGVhZGVyKSAtLT4NCjxzZWN0aW9uIGNsYXNzPSJjb250ZW50LWhlYWRlciI+DQogIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgPGRpdiBjbGFzcz0icm93IG1iLTIiPg0KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4NCiAgICAgICAgPGgxIHN0eWxlPSJmb250LXdlaWdodDogYm9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2UiPjw/PSAkc3R1ZGVudF9kYXRhLT5zdHVkZW50X2xhc3RuYW1lIC4gIiwgIiAuICRzdHVkZW50X2RhdGEtPnN0dWRlbnRfZmlyc3RuYW1lID8+PC9oMT4NCiAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICA8L2Rpdj48IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KPC9zZWN0aW9uPg0KDQo8IS0tIE1haW4gY29udGVudCAtLT4NCjxzZWN0aW9uIGNsYXNzPSJjb250ZW50Ij4NCiAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCiAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgPGRpdiBjbGFzcz0iY2FyZCBjYXJkLXByaW1hcnkgY2FyZC10YWJzIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIgcC0wIHB0LTEiPg0KICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi10YWJzIiBpZD0iY3VzdG9tLXRhYnMtb25lLXRhYiIgcm9sZT0idGFibGlzdCI+DQogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGFjdGl2ZSIgaWQ9ImN1c3RvbS10YWJzLW9uZS1ob21lLXRhYiIgZGF0YS10b2dnbGU9InBpbGwiIGhyZWY9IiNjdXN0b20tdGFicy1vbmUtaG9tZSIgcm9sZT0idGFiIiBhcmlhLWNvbnRyb2xzPSJjdXN0b20tdGFicy1vbmUtaG9tZSIgYXJpYS1zZWxlY3RlZD0iZmFsc2UiPkRFVEFJTFM8L2E+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaWQ9ImN1c3RvbS10YWJzLW9uZS1wcm9maWxlLXRhYiIgZGF0YS10b2dnbGU9InBpbGwiIGhyZWY9IiNjdXN0b20tdGFicy1vbmUtcHJvZmlsZSIgcm9sZT0idGFiIiBhcmlhLWNvbnRyb2xzPSJjdXN0b20tdGFicy1vbmUtcHJvZmlsZSIgYXJpYS1zZWxlY3RlZD0idHJ1ZSI+SUVSPC9hPg0KICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgIDwvdWw+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPg0KICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50IiBpZD0iY3VzdG9tLXRhYnMtb25lLXRhYkNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSBhY3RpdmUgc2hvdyIgaWQ9ImN1c3RvbS10YWJzLW9uZS1ob21lIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJjdXN0b20tdGFicy1vbmUtaG9tZS10YWIiPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiIHN0eWxlPSJmb250LXdlaWdodDpib2xkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgUkVDT01NRU5EQVRJT04nUw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiB0ZXh0LXJpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10b29scyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc20gYnRuLWRlZmF1bHQiIGhyZWY9InN0dWRlbnQucGhwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJuYXYtaWNvbiBmYXMgZmEtYXJyb3ctbGVmdCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc20gYnRuLWRlZmF1bHQiIGRhdGEtdG9nZ2xlPSdtb2RhbCcgZGF0YS10YXJnZXQ9JyNtb2RhbC1jcmVhdGUtcmVjb21tZW5kYXRpb24nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im5hdi1pY29uIGZhcyBmYS1wbHVzIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uY2FyZC1oZWFkZXIgLS0+DQoNCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNhcmQtYm9keSAtLT4NCg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgbXQtNSBtYi01ICI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIHByaW1hcnkiIHN0eWxlPSJmb250LXdlaWdodDpib2xkIj5TVUJKRUNUUzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgdGFibGUtcmVzcG9uc2l2ZSBwLTMiPg0KICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIgdGV4dC1ub3dyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvdXJzZSBDb2RlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VW5pdDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvL1ByZXJlcXVpc2l0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjdGlvbnM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBzdHlsZT0idGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoIChnZXRfbGlzdCgiU0VMRUNUIHMyLnN1YmplY3RfY29kZSBhcyBwcmVfc3ViamVjdF9jb2RlLHMyLnN1YmplY3RfdGl0bGUgYXMgcHJlX3N1YmplY3RfdGl0bGUscy4qLGN0LiosY2QuKiBmcm9tIHJlY29tbWVuZGVkX3N1YmplY3RzX3RibCBjZCAgbGVmdCBqb2luIHN1YmplY3RfdGJsIHMyIG9uIHMyLnN1YmplY3RfaWQgPSBjZC5wcmVfc3ViamVjdF9pZCBpbm5lciBqb2luIHN1YmplY3RfdGJsIHMgb24gcy5zdWJqZWN0X2lkID0gY2Quc3ViamVjdF9pZCBpbm5lciBqb2luIHllYXJfbGV2ZWxzX3RibCB5IG9uIHkueWVhcl9pZCA9IGNkLnllYXJfaWQgaW5uZXIgam9pbiBzZW1lc3Rlcl90Ymwgc3Mgb24gc3Muc2VtZXN0ZXJfaWQgPSBjZC5zZW1lc3Rlcl9pZCBpbm5lciBqb2luIGNsYXNzX3R5cGVfdGJsIGN0IG9uIGN0LmNsYXNzX3R5cGVfaWQgPSBzLmNsYXNzX3R5cGVfaWQgd2hlcmUgY2Quc3R1ZGVudF9pZCA9ICciIC4gICRzdHVkZW50X2RhdGEtPnN0dWRlbnRfaWQgLiAiJyBBTkQgeS55ZWFyX2lkID0gJyIgLiAkc3R1ZGVudF9kYXRhLT55ZWFyX2lkIC4gIicgQU5EIHNzLnNlbWVzdGVyX2lkID0gJyIgLiAkc3R1ZGVudF9kYXRhLT5zZW1lc3Rlcl9pZCAuICInIE9SREVSIEJZIHkueWVhcl9pZCxzcy5zZW1lc3Rlcl9pZCIpIGFzICRyb3cyKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICRyb3cyWydzdWJqZWN0X2NvZGUnXSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICRyb3cyWydzdWJqZWN0X3RpdGxlJ10gPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkcm93MlsnY2xhc3NfdHlwZV9uYW1lJ10gID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gJHJvdzJbJ3N1YmplY3RfdW5pdCddID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gIWVtcHR5KCRyb3cyWydwcmVfc3ViamVjdF9jb2RlJ10pID8gJHJvdzJbJ3ByZV9zdWJqZWN0X2NvZGUnXSAuICIgKCIgLiAkcm93MlsncHJlX3N1YmplY3RfdGl0bGUnXSAuICIpIiA6ICJOT05FIiA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGVsZXRlX3JlY29tbWVuZGF0aW9uIiB2YWx1ZT0iPD89ICRyb3cyWydyZWNvbW1lbmRlZF9zdWJqZWN0X2lkJ10gPz4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4td2FybmluZyBidXR0b24tZWRpdCcgZGF0YS1pZD0nPD89ICRyb3cyWydyZWNvbW1lbmRlZF9zdWJqZWN0X2lkJ10gPz4nIGRhdGEtdXJsPSdlZGl0X3N0dWRlbnRfcmVjb21tZW5kYXRpb24nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1lZGl0JyBkYXRhLWlkPSc8Pz0gJHJvdzJbJ3JlY29tbWVuZGVkX3N1YmplY3RfaWQnXSA/PicgZGF0YS11cmw9J2VkaXRfc3R1ZGVudF9yZWNvbW1lbmRhdGlvbic+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tZGFuZ2VyIGRlbGV0ZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KICAgICAgICAgICAgICAgICAgPCEtLSAvLmNhcmQgLS0+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiIgc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICBTVFVERU5UIFNVQkpFQ1RTDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHRleHQtcmlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRvb2xzIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tZGVmYXVsdCIgZGF0YS10b2dnbGU9J21vZGFsJyBkYXRhLXRhcmdldD0nI21vZGFsLWNyZWF0ZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibmF2LWljb24gZmFzIGZhLXBsdXMiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jYXJkLWhlYWRlciAtLT4NCg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uY2FyZC1ib2R5IC0tPg0KDQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDw/cGhwDQoNCiAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKGdldF9saXN0KCJTRUxFQ1QgKiBmcm9tIHN0dWRlbnRfc3ViamVjdHNfdGJsIGNkIGlubmVyIGpvaW4geWVhcl9sZXZlbHNfdGJsIHkgb24geS55ZWFyX2lkID0gY2QueWVhcl9pZCBpbm5lciBqb2luIHNlbWVzdGVyX3RibCBzcyBvbiBzcy5zZW1lc3Rlcl9pZCA9IGNkLnNlbWVzdGVyX2lkIHdoZXJlIGNkLnN0dWRlbnRfaWQgPSAnIiAuICRfR0VUWydpZCddIC4gIicgR1JPVVAgQlkgeS55ZWFyX2lkLHNzLnNlbWVzdGVyX2lkIE9SREVSIEJZIHkueWVhcl9pZCxzcy5zZW1lc3Rlcl9pZCAiKSBhcyAkcm93KSB7DQoNCiAgICAgICAgICAgICAgICAgID8+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgbXQtNSBtYi01ICI+DQogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiIHN0eWxlPSJmb250LXdlaWdodDpib2xkIj48Pz0gJHJvd1sneWVhcl9uYW1lJ10gPz4gPHNwYW4gc3R5bGU9ImZsb2F0OnJpZ2h0Ij4gPD89ICRyb3dbJ3NlbWVzdGVyX25hbWUnXSA/Pjwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgdGFibGUtcmVzcG9uc2l2ZSBwLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciB0ZXh0LW5vd3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9Im1pbi13aWR0aDogMTYwcHg7Ij5HcmFkZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q291cnNlIENvZGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Vbml0PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Dby9QcmVyZXF1aXNpdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjdGlvbnM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBzdHlsZT0idGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGZvcmVhY2ggKGdldF9saXN0KCJTRUxFQ1QgczIuc3ViamVjdF9jb2RlIGFzIHByZV9zdWJqZWN0X2NvZGUsczIuc3ViamVjdF90aXRsZSBhcyBwcmVfc3ViamVjdF90aXRsZSxzLiosY3QuKixjZC4qIGZyb20gc3R1ZGVudF9zdWJqZWN0c190YmwgY2QgIGxlZnQgam9pbiBzdWJqZWN0X3RibCBzMiBvbiBzMi5zdWJqZWN0X2lkID0gY2QucHJlX3N1YmplY3RfaWQgaW5uZXIgam9pbiBzdWJqZWN0X3RibCBzIG9uIHMuc3ViamVjdF9pZCA9IGNkLnN1YmplY3RfaWQgaW5uZXIgam9pbiB5ZWFyX2xldmVsc190YmwgeSBvbiB5LnllYXJfaWQgPSBjZC55ZWFyX2lkIGlubmVyIGpvaW4gc2VtZXN0ZXJfdGJsIHNzIG9uIHNzLnNlbWVzdGVyX2lkID0gY2Quc2VtZXN0ZXJfaWQgaW5uZXIgam9pbiBjbGFzc190eXBlX3RibCBjdCBvbiBjdC5jbGFzc190eXBlX2lkID0gcy5jbGFzc190eXBlX2lkIHdoZXJlIGNkLnN0dWRlbnRfaWQgPSAnIiAuICRfR0VUWydpZCddIC4gIicgQU5EIHkueWVhcl9pZCA9ICciIC4gJHJvd1sneWVhcl9pZCddIC4gIicgQU5EIHNzLnNlbWVzdGVyX2lkID0gJyIgLiAkcm93WydzZW1lc3Rlcl9pZCddIC4gIicgT1JERVIgQlkgeS55ZWFyX2lkLHNzLnNlbWVzdGVyX2lkICIpIGFzICRyb3cyKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ibWluLXdpZHRoOiAxNjBweDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJncmFkZSIgdmFsdWU9Ijw/PSAkcm93Mlsnc3R1ZGVudF9zdWJqZWN0X2lkJ10gPz4iPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZ3JhZGVfaWQiIGlkPSJncmFkZV9pZCIgY2xhc3M9ImZvcm0tY29udHJvbCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoIChnZXRfbGlzdCgiU0VMRUNUICogZnJvbSBncmFkZV9yYW5nZV90YmwgIHdoZXJlIGRlbGV0ZWRfZmxhZyA9IDAiKSBhcyAkcm93KSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI8Pz0gJHJvd1snZ3JhZGVfaWQnXSA/PiIgPD89ICRyb3dbJ2dyYWRlX2lkJ10gPT0gJHJvdzJbJ2dyYWRlX2lkJ10gPyAic2VsZWN0ZWQiIDogIiIgPz4+PD89ICRyb3dbJ2dyYWRlJ10gPz4gPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LWdyb3VwLWFwcGVuZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MgYnRuLWZsYXQgYnRuLXNtIj4gPGkgY2xhc3M9J2ZhcyBmYS1zYXZlJz48L2k+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gJHJvdzJbJ3N1YmplY3RfY29kZSddID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkcm93Mlsnc3ViamVjdF90aXRsZSddID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkcm93MlsnY2xhc3NfdHlwZV9uYW1lJ10gID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkcm93Mlsnc3ViamVjdF91bml0J10gPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICFlbXB0eSgkcm93MlsncHJlX3N1YmplY3RfY29kZSddKSA/ICRyb3cyWydwcmVfc3ViamVjdF9jb2RlJ10gLiAiICgiIC4gJHJvdzJbJ3ByZV9zdWJqZWN0X3RpdGxlJ10gLiAiKSIgOiAiTk9ORSIgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJQT1NUIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRlbGV0ZSIgdmFsdWU9Ijw/PSAkcm93Mlsnc3R1ZGVudF9zdWJqZWN0X2lkJ10gPz4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdidG4gYnRuLXNtIGJ0bi13YXJuaW5nIGJ1dHRvbi1lZGl0JyBkYXRhLWlkPSc8Pz0gJHJvdzJbJ3N0dWRlbnRfc3ViamVjdF9pZCddID8+JyBkYXRhLXVybD0nZWRpdF9zdHVkZW50X2NvdXJzZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtZWRpdCcgZGF0YS1pZD0nPD89ICRyb3cyWydzdHVkZW50X3N1YmplY3RfaWQnXSA/PicgZGF0YS11cmw9J2VkaXRfc3R1ZGVudF9jb3Vyc2UnPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSdidG4gYnRuLXNtIGJ0bi1kYW5nZXIgZGVsZXRlJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ICA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCg0KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICA8P3BocA0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgIDwhLS0gLy5jYXJkIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIiBzdHlsZT0ibWluLWhlaWdodDo2NnB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiIgc3R5bGU9ImZvbnQtd2VpZ2h0OiBib2xkOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgIENVUlJJQ1VMVU0gQ0hFQ0tMSVNUIDw/PSAkZGF0YS0+cHJvZ3JhbV9jb2RlIC4gIiggUy5ZLiAiIC4gJGRhdGEtPmN1cnJpY3VsdW1fc2VtZXN0ZXJfeWVhcl9mcm9tIC4gIiB0byAiIC4gJGRhdGEtPmN1cnJpY3VsdW1fc2VtZXN0ZXJfeWVhcl90byAuICIpIiA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jYXJkLWhlYWRlciAtLT4NCg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uY2FyZC1ib2R5IC0tPg0KDQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDw/cGhwDQoNCiAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKGdldF9saXN0KCJTRUxFQ1QgKiBmcm9tIGN1cnJpY3VsdW1fc3ViamVjdHNfdGJsIGNkIGlubmVyIGpvaW4geWVhcl9sZXZlbHNfdGJsIHkgb24geS55ZWFyX2lkID0gY2QueWVhcl9pZCBpbm5lciBqb2luIHNlbWVzdGVyX3RibCBzcyBvbiBzcy5zZW1lc3Rlcl9pZCA9IGNkLnNlbWVzdGVyX2lkIHdoZXJlIGNkLmN1cnJpY3VsdW1faWQgPSAnIiAuICRzdHVkZW50X2RhdGEtPmN1cnJpY3VsdW1faWQgLiAiJyBHUk9VUCBCWSB5LnllYXJfaWQsc3Muc2VtZXN0ZXJfaWQgT1JERVIgQlkgeS55ZWFyX2lkLHNzLnNlbWVzdGVyX2lkICIpIGFzICRyb3cpIHsNCg0KICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtdC01IG1iLTUgIj4NCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciIgc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQiPjw/PSAkcm93Wyd5ZWFyX25hbWUnXSA/PiA8c3BhbiBzdHlsZT0iZmxvYXQ6cmlnaHQiPiA8Pz0gJHJvd1snc2VtZXN0ZXJfbmFtZSddID8+PC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSB0YWJsZS1yZXNwb25zaXZlIHAtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIHRleHQtbm93cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db3Vyc2UgQ29kZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlVuaXQ8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvL1ByZXJlcXVpc2l0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IHN0eWxlPSJ0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZm9yZWFjaCAoZ2V0X2xpc3QoIlNFTEVDVCBzMi5zdWJqZWN0X2NvZGUgYXMgcHJlX3N1YmplY3RfY29kZSxzMi5zdWJqZWN0X3RpdGxlIGFzIHByZV9zdWJqZWN0X3RpdGxlLHMuKixjdC4qLGNkLiogZnJvbSBjdXJyaWN1bHVtX3N1YmplY3RzX3RibCBjZCAgbGVmdCBqb2luIHN1YmplY3RfdGJsIHMyIG9uIHMyLnN1YmplY3RfaWQgPSBjZC5wcmVfc3ViamVjdF9pZCBpbm5lciBqb2luIHN1YmplY3RfdGJsIHMgb24gcy5zdWJqZWN0X2lkID0gY2Quc3ViamVjdF9pZCBpbm5lciBqb2luIHllYXJfbGV2ZWxzX3RibCB5IG9uIHkueWVhcl9pZCA9IGNkLnllYXJfaWQgaW5uZXIgam9pbiBzZW1lc3Rlcl90Ymwgc3Mgb24gc3Muc2VtZXN0ZXJfaWQgPSBjZC5zZW1lc3Rlcl9pZCBpbm5lciBqb2luIGNsYXNzX3R5cGVfdGJsIGN0IG9uIGN0LmNsYXNzX3R5cGVfaWQgPSBzLmNsYXNzX3R5cGVfaWQgd2hlcmUgY2QuY3VycmljdWx1bV9pZCA9ICciIC4gJHN0dWRlbnRfZGF0YS0+Y3VycmljdWx1bV9pZCAuICInIEFORCB5LnllYXJfaWQgPSAnIiAuICRyb3dbJ3llYXJfaWQnXSAuICInIEFORCBzcy5zZW1lc3Rlcl9pZCA9ICciIC4gJHJvd1snc2VtZXN0ZXJfaWQnXSAuICInIE9SREVSIEJZIHkueWVhcl9pZCxzcy5zZW1lc3Rlcl9pZCAiKSBhcyAkcm93MikgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJtaW4taGVpZ2h0OjYyLjVweCFpbXBvcnRhbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9Im1pbi1oZWlnaHQ6NjIuNXB4IWltcG9ydGFudDtoZWlnaHQ6NjIuNXB4OyI+PD89ICRyb3cyWydzdWJqZWN0X2NvZGUnXSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ibWluLWhlaWdodDo2Mi41cHghaW1wb3J0YW50O2hlaWdodDo2Mi41cHg7Ij48Pz0gJHJvdzJbJ3N1YmplY3RfdGl0bGUnXSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ibWluLWhlaWdodDo2Mi41cHghaW1wb3J0YW50O2hlaWdodDo2Mi41cHg7Ij48Pz0gJHJvdzJbJ2NsYXNzX3R5cGVfbmFtZSddICA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ibWluLWhlaWdodDo2Mi41cHghaW1wb3J0YW50O2hlaWdodDo2Mi41cHg7Ij48Pz0gJHJvdzJbJ3N1YmplY3RfdW5pdCddID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJtaW4taGVpZ2h0OjYyLjVweCFpbXBvcnRhbnQ7aGVpZ2h0OjYyLjVweDsiPjw/PSAhZW1wdHkoJHJvdzJbJ3ByZV9zdWJqZWN0X2NvZGUnXSkgPyAkcm93MlsncHJlX3N1YmplY3RfY29kZSddIC4gIiAoIiAuICRyb3cyWydwcmVfc3ViamVjdF90aXRsZSddIC4gIikiIDogIk5PTkUiID8+PC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ICA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCg0KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICA8P3BocA0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgIDwhLS0gLy5jYXJkIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSIgaWQ9ImN1c3RvbS10YWJzLW9uZS1wcm9maWxlIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJjdXN0b20tdGFicy1vbmUtcHJvZmlsZS10YWIiPg0KDQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSB0YWJsZS1yZXNwb25zaXZlIHAtMyI+DQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciB0ZXh0LW5vd3JhcCI+DQogICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICA8dGg+QWN0aW9uczwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgPHRoPkZlZWRiYWNrPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICA8dGJvZHkgc3R5bGU9InRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Ij4NCiAgICAgICAgICAgICAgICAgICAgPD9waHAgZm9yZWFjaCAoZ2V0X2xpc3QoIlNFTEVDVCAqIGZyb20gc3R1ZGVuX2ZpbGVfdGJsIGYgaW5uZXIgam9pbiBldmFsdWF0aW9uX3N0YXR1c190YmwgZXMgb24gZXMuZXZhbHVhdGlvbl9zdGF0dXNfaWQgPSBmLmV2YWx1YXRpb25fc3RhdHVzX2lkIGxlZnQgam9pbiBzZW1lc3Rlcl90YmwgcyBvbiBzLnNlbWVzdGVyX2lkID0gZi5zZW1lc3Rlcl9pZCBsZWZ0IGpvaW4gIHllYXJfbGV2ZWxzX3RibCB5IG9uIHkueWVhcl9pZCA9IGYueWVhcl9pZCB3aGVyZSBmLnN0dWRlbnRfaWQgPSAiIC4gJHN0dWRlbnRfZGF0YS0+c3R1ZGVudF9pZCkgYXMgJHJvdzIpIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ijw/PSAkcm93MlsnZmlsZV9uYW1lJ10gPz4iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSI+PGkgY2xhc3M9J2ZhcyBmYS1leWUnPjwvaT48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ijw/PSAkcm93MlsnZmlsZV9uYW1lJ10gPz4iIGRvd25sb2FkIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5Ij48aSBjbGFzcz0nZmFzIGZhLWRvd25sb2FkJz48L2k+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8Pz0gJHJvdzJbJ2V2YWx1YXRpb25fc3RhdHVzJ10gPz4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjaGFuZ2Vfc3RhdHVzIiB2YWx1ZT0iPD89ICRyb3cyWydzdHVkZW5fZmlsZV9pZCddID8+Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZXZhbHVhdGlvbl9zdGF0dXNfaWQiIGlkPSJldmFsdWF0aW9uX3N0YXR1c19pZCIgY2xhc3M9ImZvcm0tY29udHJvbCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZm9yZWFjaCAoZ2V0X2xpc3QoIlNFTEVDVCAqIGZyb20gZXZhbHVhdGlvbl9zdGF0dXNfdGJsICB3aGVyZSBkZWxldGVkX2ZsYWcgPSAwIikgYXMgJHJvdykgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijw/PSAkcm93WydldmFsdWF0aW9uX3N0YXR1c19pZCddID8+IiA8Pz0gJHJvd1snZXZhbHVhdGlvbl9zdGF0dXNfaWQnXSA9PSAkcm93MlsnZXZhbHVhdGlvbl9zdGF0dXNfaWQnXSA/ICJzZWxlY3RlZCIgOiAiIiA/Pj48Pz0gJHJvd1snZXZhbHVhdGlvbl9zdGF0dXMnXSA/PiA8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tZmxhdCBidG4tc20iPiA8aSBjbGFzcz0nZmFzIGZhLXNhdmUnPjwvaT48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnB1dC1ncm91cCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InVwZGF0ZV9mZWVkYmFjayIgdmFsdWU9IjEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWQiIHZhbHVlPSI8Pz0gJHJvdzJbJ3N0dWRlbl9maWxlX2lkJ10gPz4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9ImZlZWRiYWNrIiBpZD0iIiBjbGFzcz0iZm9ybS1jb250cm9sIj48Pz0gJHJvdzJbJ2ZlZWRiYWNrJ10gPz48L3RleHRhcmVhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWZsYXQgYnRuLXNtIj5TYXZlPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPD9waHAgfSAgPz4NCiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCg0KICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDwhLS0gLy5jYXJkIC0tPg0KICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPCEtLSAvLnJvdyAtLT4NCg0KICAgIDwhLS0gLy5yb3cgLS0+DQogIDwvZGl2PjwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQo8L3NlY3Rpb24+DQo8IS0tIC8uY29udGVudCAtLT4NCg0KPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9Im1vZGFsLWNyZWF0ZSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibW9kYWwtYWRkLXRpdGxlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+DQogIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiIHJvbGU9ImRvY3VtZW50Ij4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50IiBpZD0ibW9kYWwtY3JlYXRlLWNvbnRlbnQiPg0KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGJnLXByaW1hcnkgdGV4dC13aGl0ZSI+DQogICAgICAgIDxkaXYgY2xhc3M9InJvdyB3LTEwMCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0ibW9kYWwtYWRkLXRpdGxlIj5BZGQgU3ViamVjdDwvaDQ+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWF1dG8iPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KICAgICAgPGZvcm0gbWV0aG9kPSJQT1NUIiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIj4NCiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3JlYXRlIiB2YWx1ZT0iMSI+DQogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InN0dWRlbnRfaWQiIHZhbHVlPSI8Pz0gJF9HRVRbJ2lkJ10gPz4iPg0KDQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRlcGFydG1lbnQtY291cnNlIiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+WWVhcjo8L2xhYmVsPg0KICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9InllYXJfaWQiIGlkPSJ5ZWFyX2lkIiBjbGFzcz0iZm9ybS1jb250cm9sIj4NCiAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoIChnZXRfbGlzdCgiU0VMRUNUICogZnJvbSB5ZWFyX2xldmVsc190YmwgIHdoZXJlIGRlbGV0ZWRfZmxhZyA9IDAiKSBhcyAkcm93KSB7ID8+DQogICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI8Pz0gJHJvd1sneWVhcl9pZCddID8+Ij48Pz0gJHJvd1sneWVhcl9uYW1lJ10gPz4gPC9vcHRpb24+DQogICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGVwYXJ0bWVudC1jb3Vyc2UiIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5TZW1lc3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9InNlbWVzdGVyX2lkIiBpZD0ic2VtZXN0ZXJfaWQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPg0KICAgICAgICAgICAgICAgIDw/cGhwIGZvcmVhY2ggKGdldF9saXN0KCJTRUxFQ1QgKiBmcm9tIHNlbWVzdGVyX3RibCAgd2hlcmUgZGVsZXRlZF9mbGFnID0gMCIpIGFzICRyb3cpIHsgPz4NCiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijw/PSAkcm93WydzZW1lc3Rlcl9pZCddID8+Ij48Pz0gJHJvd1snc2VtZXN0ZXJfbmFtZSddID8+IDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4NCiAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRlcGFydG1lbnQtY291cnNlIiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+Q291cnNlOjwvbGFiZWw+DQogICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic3ViamVjdF9pZCIgaWQ9InN1YmplY3RfaWQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPg0KICAgICAgICAgICAgICAgIDw/cGhwIGZvcmVhY2ggKGdldF9saXN0KCJTRUxFQ1QgY2MuKixzLiogZnJvbSBzdWJqZWN0X3RibCBzIGlubmVyIGpvaW4gY2xhc3NfdHlwZV90YmwgY2Mgb24gY2MuY2xhc3NfdHlwZV9pZCA9IHMuY2xhc3NfdHlwZV9pZCB3aGVyZSBzLmRlbGV0ZWRfZmxhZyA9IDAgYW5kIHMucHJvZ3JhbV9pZCA9ICIgLiAkZGF0YS0+cHJvZ3JhbV9pZCkgYXMgJHJvdykgeyA/Pg0KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iPD89ICRyb3dbJ3N1YmplY3RfaWQnXSA/PiI+PD89ICRyb3dbJ3N1YmplY3RfY29kZSddID8+ICg8Pz0gJHJvd1snc3ViamVjdF90aXRsZSddID8+KSB8IDw/PSAkcm93WydjbGFzc190eXBlX25hbWUnXSA/PiB8IDw/PSAkcm93WydzdWJqZWN0X3VuaXQnXSA/PiBVbml0cyA8L29wdGlvbj4NCiAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQogICAgICAgICAgICAgIDwvc2VsZWN0Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkZXBhcnRtZW50LWNvdXJzZSIgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkNvL1ByZXJlcXVpc2l0ZTo8L2xhYmVsPg0KICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9InByZV9zdWJqZWN0X2lkIiBpZD0icHJlX3N1YmplY3RfaWQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPg0KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAiPk5PTkU8L29wdGlvbj4NCiAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoIChnZXRfbGlzdCgiU0VMRUNUIGNjLioscy4qIGZyb20gc3ViamVjdF90YmwgcyBpbm5lciBqb2luIGNsYXNzX3R5cGVfdGJsIGNjIG9uIGNjLmNsYXNzX3R5cGVfaWQgPSBzLmNsYXNzX3R5cGVfaWQgd2hlcmUgcy5kZWxldGVkX2ZsYWcgPSAwIGFuZCBzLnByb2dyYW1faWQgPSAiIC4gJGRhdGEtPnByb2dyYW1faWQpIGFzICRyb3cpIHsgPz4NCiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijw/PSAkcm93WydzdWJqZWN0X2lkJ10gPz4iPjw/PSAkcm93WydzdWJqZWN0X2NvZGUnXSA/PiAoPD89ICRyb3dbJ3N1YmplY3RfdGl0bGUnXSA/PikgfCA8Pz0gJHJvd1snY2xhc3NfdHlwZV9uYW1lJ10gPz4gfCA8Pz0gJHJvd1snc3ViamVjdF91bml0J10gPz4gVW5pdHMgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4NCiAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DbG9zZTwvYnV0dG9uPg0KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPkFkZDwvYnV0dG9uPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L2Rpdj4NCiAgPC9kaXY+DQo8L2Rpdj4NCjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJtb2RhbC1jcmVhdGUtcmVjb21tZW5kYXRpb24iIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im1vZGFsLWFkZC10aXRsZSIgYXJpYS1oaWRkZW49InRydWUiPg0KICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIiByb2xlPSJkb2N1bWVudCI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCIgaWQ9Im1vZGFsLWNyZWF0ZS1jb250ZW50Ij4NCiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciBiZy1wcmltYXJ5IHRleHQtd2hpdGUiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdy0xMDAganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyIj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPg0KICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9Im1vZGFsLWFkZC10aXRsZSI+QWRkIFN1YmplY3Q8L2g0Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1hdXRvIj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCiAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSI+DQogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNyZWF0ZV9yZWNvbW1lbmRhdGlvbiIgdmFsdWU9IjEiPg0KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdHVkZW50X2lkIiB2YWx1ZT0iPD89ICRfR0VUWydpZCddID8+Ij4NCiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ieWVhcl9pZCIgdmFsdWU9Ijw/PSAkc3R1ZGVudF9kYXRhLT55ZWFyX2lkID8+Ij4NCiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2VtZXN0ZXJfaWQiIHZhbHVlPSI8Pz0gJHN0dWRlbnRfZGF0YS0+c2VtZXN0ZXJfaWQgPz4iPg0KDQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KDQoNCiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkZXBhcnRtZW50LWNvdXJzZSIgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkNvdXJzZTo8L2xhYmVsPg0KICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9InN1YmplY3RfaWQiIGlkPSJzdWJqZWN0X2lkIiBjbGFzcz0iZm9ybS1jb250cm9sIj4NCiAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoIChnZXRfbGlzdCgiU0VMRUNUIGNjLioscy4qIGZyb20gc3ViamVjdF90YmwgcyBpbm5lciBqb2luIGNsYXNzX3R5cGVfdGJsIGNjIG9uIGNjLmNsYXNzX3R5cGVfaWQgPSBzLmNsYXNzX3R5cGVfaWQgd2hlcmUgcy5kZWxldGVkX2ZsYWcgPSAwIGFuZCBzLnByb2dyYW1faWQgPSAiIC4gJGRhdGEtPnByb2dyYW1faWQpIGFzICRyb3cpIHsgPz4NCiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijw/PSAkcm93WydzdWJqZWN0X2lkJ10gPz4iPjw/PSAkcm93WydzdWJqZWN0X2NvZGUnXSA/PiAoPD89ICRyb3dbJ3N1YmplY3RfdGl0bGUnXSA/PikgfCA8Pz0gJHJvd1snY2xhc3NfdHlwZV9uYW1lJ10gPz4gfCA8Pz0gJHJvd1snc3ViamVjdF91bml0J10gPz4gVW5pdHMgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGVwYXJ0bWVudC1jb3Vyc2UiIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5Dby9QcmVyZXF1aXNpdGU6PC9sYWJlbD4NCiAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJwcmVfc3ViamVjdF9pZCIgaWQ9InByZV9zdWJqZWN0X2lkIiBjbGFzcz0iZm9ybS1jb250cm9sIj4NCiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwIj5OT05FPC9vcHRpb24+DQogICAgICAgICAgICAgICAgPD9waHAgZm9yZWFjaCAoZ2V0X2xpc3QoIlNFTEVDVCBjYy4qLHMuKiBmcm9tIHN1YmplY3RfdGJsIHMgaW5uZXIgam9pbiBjbGFzc190eXBlX3RibCBjYyBvbiBjYy5jbGFzc190eXBlX2lkID0gcy5jbGFzc190eXBlX2lkIHdoZXJlIHMuZGVsZXRlZF9mbGFnID0gMCBhbmQgcy5wcm9ncmFtX2lkID0gIiAuICRkYXRhLT5wcm9ncmFtX2lkKSBhcyAkcm93KSB7ID8+DQogICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI8Pz0gJHJvd1snc3ViamVjdF9pZCddID8+Ij48Pz0gJHJvd1snc3ViamVjdF9jb2RlJ10gPz4gKDw/PSAkcm93WydzdWJqZWN0X3RpdGxlJ10gPz4pIHwgPD89ICRyb3dbJ2NsYXNzX3R5cGVfbmFtZSddID8+IHwgPD89ICRyb3dbJ3N1YmplY3RfdW5pdCddID8+IFVuaXRzIDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4NCiAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+DQogICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+Q2xvc2U8L2J1dHRvbj4NCiAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5BZGQ8L2J1dHRvbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9kaXY+DQogIDwvZGl2Pg0KPC9kaXY+DQo8IS0tIC8ubW9kYWwtZGlhbG9nIC0tPg0KPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9Im1vZGFsLWVkaXQiPg0KICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIiByb2xlPSJkb2N1bWVudCI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCIgaWQ9Im1vZGFsLWVkaXQtY29udGVudCI+DQoNCiAgICA8L2Rpdj4NCiAgPC9kaXY+DQo8L2Rpdj4NCg0KPD9waHANCmluY2x1ZGVfb25jZSgnZm9vdGVyLnBocCcpOw0KDQo/PiI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";